from aiogram import Bot
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ParseMode
from aiogram import types

import pytz

from dotenv import load_dotenv
import os

import datetime

from app import keyboards as kb
from app import database as db

load_dotenv()
bot = Bot(token=os.getenv("TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
op_id = os.getenv('OPERATOR_ID')

moscow_tz = pytz.timezone('Europe/Moscow')

NEWS_ID = 'asurastore_news'
REVIEWS_ID = 'asurastore_reviews'


async def check_sub_channel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False


async def show_item_prev_buy(item_in_db, item_name, description, reply_kb, callback_query: types.CallbackQuery):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if callback_query.from_user.id not in blocked:
        if await check_sub_channel(
                await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=callback_query.from_user.id)):
            await db.set_active(callback_query.from_user.id, 1)
            price = await db.show_price(item_in_db)
            await bot.edit_message_text(chat_id=callback_query.from_user.id, text=f'''
üéà{item_name}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}


üíµ –¶–µ–Ω–∞: {price}‚ÇΩ''',
                                        reply_markup=reply_kb,
                                        message_id=callback_query.message.message_id, parse_mode=ParseMode.HTML,
                                        disable_web_page_preview=True)
        else:
            await callback_query.message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(callback_query.from_user.id, 0)
    else:
        await db.set_active(callback_query.from_user.id, 0)


async def confirm_item_buy(item_in_db, item_name, callback_query: types.CallbackQuery, ):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if callback_query.from_user.id not in blocked:
        if await check_sub_channel(
                await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=callback_query.from_user.id)):
            await db.set_active(callback_query.from_user.id, 1)
            money = await db.show_money(callback_query.from_user.id)
            time = str(datetime.datetime.now(moscow_tz)).split('+')[0]
            price = await db.show_price(item_in_db)
            if money >= price:
                await db.add_money(callback_query.from_user.id, -price)
                await db.add_purchase(callback_query.from_user.id, item_name, price,
                                      time)
                id_p = await db.show_purchase_id(callback_query.from_user.id, time)
                await bot.edit_message_text(
                    text=f'''
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π {item_name}. 
C–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: @AsuraStore_helper, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º —Å–∞–º.

—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {id_p}
                            ''', reply_markup=kb.review_kb(id_p), chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id)
                await bot.send_message(op_id,
                                       f'''–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {callback_query.from_user.full_name}\n@{callback_query.from_user.username}\nid_user: {callback_query.from_user.id}\n\nid_purc: {id_p}\n—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:{item_name}''')
            else:
                await callback_query.message.answer(
                    text=f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {price - money}‚ÇΩ',
                    reply_markup=kb.keyboard_top_up)
        else:
            await callback_query.message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(callback_query.from_user.id, 0)
    else:
        await db.set_active(callback_query.from_user.id, 0)
