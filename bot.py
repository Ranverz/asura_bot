from aiogram import types
from aiogram.utils import executor
from aiogram.types.message import ContentType, ParseMode
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

import os

from app import keyboards as kb
from app import database as db
from app.var import dp, bot, check_sub_channel, NEWS_ID, REVIEWS_ID

from handlers.profile_hnd import reg_hand_profile
from handlers.admin_hnd import reg_hand_admin
from handlers.discord_hnd import reg_hand_discord
from handlers.genshin_hnd import reg_hand_genshin
from handlers.honkai_hnd import reg_hand_honkai
from handlers.tg_hnd import reg_hand_tg
from handlers.yand_hnd import reg_hand_ya
from handlers.xbox_hnd import reg_hand_xbox
from handlers.other_hnd import reg_hand_other

from dotenv import load_dotenv

load_dotenv()
adm_id = int(os.getenv('ADMIN_ID'))


async def on_startup(_):
    await db.db_start()


class Newreviewm(StatesGroup):
    id_pr_mark = State()
    rev_mark = State()
    rev_confirm = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if message.chat.type == 'private':
            if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
                await db.set_active(message.from_user.id, 1)
                z = await db.cmd_start_db(message.from_user.id)
                await message.answer(
                    f'''
–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω

<a href='https://t.me/{NEWS_ID}'>–ù–æ–≤–æ—Å—Ç–∏</a> | <a href='https://t.me/{REVIEWS_ID}'>–û—Ç–∑—ã–≤—ã</a>''',

                    reply_markup=kb.keyboard_main, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                if z:
                    await bot.send_message(adm_id,
                                           f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n@{message.from_user.username}\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:{z}')
                if message.from_user.id == adm_id:
                    await message.answer(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, {message.from_user.full_name}",
                                         reply_markup=kb.keyboard_main_admin)
            else:
                await message.answer(
                    f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                    parse_mode=types.ParseMode.HTML)
                await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            if message.chat.type == 'private':
                await message.reply("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞: @AsuraStore_helper")
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.message_handler(text='–ü–æ–º–æ—â—å')
async def process_help_command(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            if message.chat.type == 'private':
                await message.reply("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞: @AsuraStore_helper")
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.message_handler(text='–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')
async def process_help_command(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            if message.chat.type == 'private':
                await message.reply(
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–æ–≤–∞—Ä—ã', –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.message_handler(text='–¢–æ–≤–∞—Ä—ã')
async def stock_message(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            if message.chat.type == 'private':
                await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:",
                                     reply_markup=kb.keyboard_stock_inl)
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.callback_query_handler(text_contains='addreview_')
async def addreview_activate_fsm(callback: types.CallbackQuery, state: FSMContext):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if callback.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=callback.from_user.id)):
            await db.set_active(callback.from_user.id, 1)
            await Newreviewm.id_pr_mark.set()
            id_pr_for_rev = callback.message.reply_markup.inline_keyboard[0][0].callback_data.split('_')[1]
            async with state.proxy() as data:
                data['id_pr_mark'] = id_pr_for_rev
            await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–æ–º–µ—Ä {id_pr_for_rev}',
                                          reply_markup=kb.keyboard_review_mark)
            await Newreviewm.next()
        else:
            await callback.message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(callback.from_user.id, 0)
    else:
        await db.set_active(callback.from_user.id, 0)


@dp.message_handler(content_types=['text'], state=Newreviewm.rev_mark)
async def addreview_mark(message: types.Message, state: FSMContext):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            if message.chat.type == 'private':
                txt = message.text
                async with state.proxy() as data:
                    if txt == '‚ù§Ô∏è' or txt == 'üëé':
                        data['rev_mark'] = txt
                        await Newreviewm.next()
                        await message.answer('''–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.
                        
–ü—Ä–∏–º–µ—Ä:
–û—Ç–ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω. –í—Å–µ —Å–¥–µ–ª–∞–ª–∏ –±—ã—Å—Ç—Ä–æ.''', reply_markup=kb.keyboard_review_text_empty)
                    elif txt == '–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤':
                        await state.finish()
                        await message.answer('–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=kb.keyboard_main)
                    else:
                        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É.')
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.callback_query_handler(text='review_notext', state=Newreviewm.rev_confirm)
async def addreview_notext(callback: types.CallbackQuery, state: FSMContext):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if callback.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=callback.from_user.id)):
            await db.set_active(callback.from_user.id, 1)
            async with state.proxy() as data:
                mr = data['rev_mark']
                id_pr = data['id_pr_mark']
            pr = await db.show_purchase_info(callback.from_user.id, id_pr)
            await bot.send_message(chat_id=f'@{REVIEWS_ID}', text=f'''
–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {id_pr}
–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {pr[0]}
–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {pr[1]}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username}
–û—Ü–µ–Ω–∫–∞: {mr}
–û—Ç–∑—ã–≤: [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç.]''')
            await callback.message.answer('–í–∞—à –æ—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞', reply_markup=kb.keyboard_main)
            await state.finish()
        else:
            await callback.message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(callback.from_user.id, 0)
    else:
        await db.set_active(callback.from_user.id, 0)


@dp.message_handler(content_types=['text'], state=Newreviewm.rev_confirm)
async def addreview_text(message: types.Message, state: FSMContext):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            if message.chat.type == 'private':
                txt = message.text
                if txt != '':
                    async with state.proxy() as data:
                        mr = data['rev_mark']
                        id_pr = data['id_pr_mark']
                    pr = await db.show_purchase_info(message.from_user.id, id_pr)
                    await bot.send_message(chat_id=f'@{REVIEWS_ID}',
                                           text=f'''
–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {id_pr}
–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {pr[0]}
–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {pr[1]}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}
–û—Ü–µ–Ω–∫–∞: {mr}
–û—Ç–∑—ã–≤: {txt}''')

                    await message.answer('–í–∞—à –æ—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', reply_markup=kb.keyboard_main)
                    await state.finish()
                else:
                    await message.answer('''–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.
                        
–ü—Ä–∏–º–µ—Ä:
–û—Ç–ª–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω. –í—Å–µ —Å–¥–µ–ª–∞–ª–∏ –±—ã—Å—Ç—Ä–æ.''')
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


reg_hand_profile()
reg_hand_admin()
reg_hand_discord()
reg_hand_genshin()
reg_hand_honkai()
reg_hand_tg()
reg_hand_ya()
reg_hand_xbox()
reg_hand_other()


@dp.message_handler()
async def echo_message(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await db.set_active(message.from_user.id, 1)
            await message.reply(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /start')
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(message: types.Message):
    blocked_raw = (await db.show_blocked_users())
    blocked = list(map(lambda user: user[0], blocked_raw))
    if message.from_user.id not in blocked:
        if await check_sub_channel(await bot.get_chat_member(chat_id=f'@{NEWS_ID}', user_id=message.from_user.id)):
            await message.reply(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /start')
        else:
            await message.answer(
                f'''–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –º–∞–≥–∞–∑–∏–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='https://t.me/{NEWS_ID}'>–∫–∞–Ω–∞–ª</a>.''',
                parse_mode=types.ParseMode.HTML)
            await db.set_active(message.from_user.id, 0)
    else:
        await db.set_active(message.from_user.id, 0)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
